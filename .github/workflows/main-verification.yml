name: Main Verification

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  security-events: write
  actions: read
  contents: write

jobs:
  main-build:
    name: Main Build
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.0'
        
    - name: Generate version timestamp
      id: version
      run: |
        echo "version=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT
        
    - name: Build main version
      run: |
        xcodebuild -project TempoStatusBarApp.xcodeproj \
          -scheme TempoStatusBarApp \
          -configuration Release \
          -destination 'platform=macOS' \
          build

    - name: Run unit tests
      run: |
        echo "üß™ Running unit tests..."
        xcodebuild test -project TempoStatusBarApp.xcodeproj \
          -scheme TempoStatusBarApp \
          -destination 'platform=macOS' \
          -resultBundlePath ./test-results.xcresult
        
        echo "‚úÖ Unit tests completed successfully"

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: test-results.xcresult
        retention-days: 30

    - name: Test summary
      if: always()
      run: |
        echo "üìä Test Summary:"
        echo "=================="
        if [ -d "test-results.xcresult" ]; then
          echo "‚úÖ Test results generated successfully"
          echo "üìÅ Test results saved as artifact: test-results"
          echo "üîç View test results in the Actions tab"
        else
          echo "‚ö†Ô∏è  No test results found"
        fi
          
    - name: Archive app
      run: |
        xcodebuild -project TempoStatusBarApp.xcodeproj \
          -scheme TempoStatusBarApp \
          -configuration Release \
          -destination 'platform=macOS' \
          archive \
          -archivePath ./build/TempoStatusBarApp.xcarchive
          
    - name: Create DMG
      run: |
        # Create a simple DMG structure
        mkdir -p ./dmg/TempoStatusBarApp.app
        cp -R ./build/TempoStatusBarApp.xcarchive/Products/Applications/TempoStatusBarApp.app ./dmg/
        
        # Create DMG (requires hdiutil)
        hdiutil create -volname "TempoStatusBarApp" -srcfolder ./dmg -ov -format UDZO TempoStatusBarApp-${{ steps.version.outputs.version }}.dmg
        
    - name: Upload DMG artifact
      uses: actions/upload-artifact@v4
      with:
        name: TempoStatusBarApp-${{ steps.version.outputs.version }}
        path: TempoStatusBarApp-${{ steps.version.outputs.version }}.dmg
        
  security-check:
    name: Security Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true

  documentation-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
        
    - name: Check for documentation
      run: |
        if [ -f "README.md" ]; then
          echo "‚úÖ README.md found"
        else
          echo "‚ö†Ô∏è  README.md not found"
        fi
        
        if [ -f "CONTRIBUTING.md" ]; then
          echo "‚úÖ CONTRIBUTING.md found"
        else
          echo "‚ö†Ô∏è  CONTRIBUTING.md not found"
        fi 
